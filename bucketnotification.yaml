Parameters:
  TestBucket:
    Type: String

Resources:
      BucketNotifications:
        Type: Custom::S3BucketNotifications
        Properties:
          ServiceToken:
            Fn::GetAtt:
              - BucketNotificationsHandler
              - Arn
          BucketName:
            Ref: TestBucket
          NotificationConfiguration:
            LambdaFunctionConfigurations:
              - Events:
                  - s3:ObjectCreated:*
                Filter:
                  Key:
                    FilterRules:
                      - Name: suffix
                        Value: .png
                      - Name: prefix
                        Value: images
                LambdaFunctionArn:
                  Fn::GetAtt:
                    - TestLambda
                    - Arn
          Managed: false
        DependsOn:
          - AllowTestBucketInvokeTestLambda
      BucketNotificationsHandler:
        Type: AWS::Lambda::Function
        Properties:
          Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
          Handler: index.handler
          Role:
            Fn::GetAtt:
              - BucketNotificationsHandlerRole
              - Arn
          Runtime: python3.9
          Timeout: 300
          Code:
            ZipFile: |
              import boto3  # type: ignore
              import json
              import logging
              import urllib.request

              s3 = boto3.client("s3")

              CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

              def handler(event: dict, context):
                  response_status = "SUCCESS"
                  error_message = ""
                  try:
                      props = event["ResourceProperties"]
                      bucket = props["BucketName"]
                      notification_configuration = props["NotificationConfiguration"]
                      request_type = event["RequestType"]
                      managed = props.get('Managed', 'true').lower() == 'true'
                      stack_id = event['StackId']

                      if managed:
                        config = handle_managed(request_type, notification_configuration)
                      else:
                        config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                      put_bucket_notification_configuration(bucket, config)
                  except Exception as e:
                      logging.exception("Failed to put bucket notification configuration")
                      response_status = "FAILED"
                      error_message = f"Error: {str(e)}. "
                  finally:
                      submit_response(event, context, response_status, error_message)


              def handle_managed(request_type, notification_configuration):
                if request_type == 'Delete':
                  return {}
                return notification_configuration


              def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):

                # find external notifications
                external_notifications = find_external_notifications(bucket, stack_id)

                # if delete, that's all we need
                if request_type == 'Delete':
                  return external_notifications

                def with_id(notification):
                  notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
                  return notification

                # otherwise, merge external with incoming config and augment with id
                notifications = {}
                for t in CONFIGURATION_TYPES:
                  external = external_notifications.get(t, [])
                  incoming = [with_id(n) for n in notification_configuration.get(t, [])]
                  notifications[t] = external + incoming
                return notifications


              def find_external_notifications(bucket, stack_id):
                existing_notifications = get_bucket_notification_configuration(bucket)
                external_notifications = {}
                for t in CONFIGURATION_TYPES:
                  # if the notification was created by us, we know what id to expect
                  # so we can filter by it.
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

                return external_notifications


              def get_bucket_notification_configuration(bucket):
                return s3.get_bucket_notification_configuration(Bucket=bucket)


              def put_bucket_notification_configuration(bucket, notification_configuration):
                s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


              def submit_response(event: dict, context, response_status: str, error_message: str):
                  response_body = json.dumps(
                      {
                          "Status": response_status,
                          "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                          "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                          "StackId": event["StackId"],
                          "RequestId": event["RequestId"],
                          "LogicalResourceId": event["LogicalResourceId"],
                          "NoEcho": False,
                      }
                  ).encode("utf-8")
                  headers = {"content-type": "", "content-length": str(len(response_body))}
                  try:
                      req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                      with urllib.request.urlopen(req) as response:
                          print(response.read().decode("utf-8"))
                      print("Status code: " + response.reason)
                  except Exception as e:
                      print("send(..) failed executing request.urlopen(..): " + str(e))
        DependsOn:
          - BucketNotificationsHandlerRoleDefaultPolicy
          - BucketNotificationsHandlerRole
      AllowTestBucketInvokeTestLambda:
        Type: AWS::Lambda::Permission
        Properties:
          Action: lambda:InvokeFunction
          FunctionName:
            Fn::GetAtt:
              - TestLambda
              - Arn
          Principal: s3.amazonaws.com
          SourceAccount:
            Ref: AWS::AccountId
          SourceArn:
            !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref TestBucket
      BucketNotificationsHandlerRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
            Version: "2012-10-17"
          ManagedPolicyArns:
            - Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      BucketNotificationsHandlerRoleDefaultPolicy:
        Type: AWS::IAM::Policy
        Properties:
          PolicyDocument:
            Statement:
              - Action: s3:*BucketNotification
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: BucketNotificationsHandlerRoleDefaultPolicy
          Roles:
            - Ref: BucketNotificationsHandlerRole
      TestLambda:
        Type: AWS::Lambda::Function
        Properties:
          Handler: index.handler
          Runtime: python3.9
          Role: !GetAtt TestLambdaHandlerRole.Arn
          Code:
            ZipFile: |
              def handler(event: dict, context):
                  print("TestLambda executing!!")

      TestLambdaHandlerRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Statement:
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
            Version: "2012-10-17"
          ManagedPolicyArns:
            - Fn::Join:
              - ""
              - - "arn:"
                - Ref: AWS::Partition
                - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
